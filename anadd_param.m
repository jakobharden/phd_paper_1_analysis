## Setup analysis parameter data structure#### Usage: [r_ds] = anadd_param(p_rm)#### p_rm ... run mode, optional, default = [], <any>## r_ds ... return: analysis parameter data structure, <struct>#### Note: If p_rm is not empty, also export the data structure to the TeX file './results/param.tex'.#### Copyright 2025 Jakob Harden (jakob.harden@tugraz.at, Graz University of Technology, Graz, Austria)## License: MIT## This file is part of the PhD thesis of Jakob Harden.## ## Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated ## documentation files (the “Software”), to deal in the Software without restriction, including without ## limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of ## the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:## ## THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ## THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE ## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, ## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.##function [r_ds] = anadd_param()    #############################################################################  ## File and directory paths    ## data sets source path  r_ds.paths.dssrc = '/home/harden/Documents/tugraz/0_test_series';    ## relative path to the compiled data sets of test series 5  r_ds.paths.ts5oct = 'ts5_ref_air/oct';    ## relative path to the compiled data sets of test series 6  r_ds.paths.ts6oct = 'ts6_ref_water/oct';    ## relative path to the compiled data sets of test series 7  r_ds.paths.ts7oct = 'ts7_ref_aluminium/v11/oct';    ## binary export path  r_ds.paths.expbin = './results/bin';    ## TeX export path  r_ds.paths.exptex = './results/tex';    #############################################################################  ## Electromagnetic response section (ERS, disturbance caused by pulse excitation)  ##   Reference: DOI 10.3217/eh2ek-56e78, URL: https://repository.tugraz.at/records/eh2ek-56e78    ## Offset of the ERS to the trigger point (t = 0), estimate based on visual inspection and correlation analysis (see reference)  r_ds.ers_delay = 10; # samples    ## Offset uncertainty, estimate based on visual inspection and correlation analysis (see reference)  r_ds.ers_delay_uncert = [-5, 2]; # samples, [u_pos, u_neg]    ## Length of the ERS, estimate based on visual inspection and correlation analysis (see reference)  r_ds.ers_length = 90; # samples    #############################################################################  ## Literature values for the reference materials    ## Reference tests on air  ##  Reference: https://www.engineeringtoolbox.com/air-speed-sound-d_603.html (2025-02-03)  r_ds.speed_air_temp = [10, 15, 20, 25, 30]; # temperature supports, rows  r_ds.speed_air_humid = [40, 50, 60, 70, 80, 90]; # humidity supports, columns  r_ds.speed_air_cs = [...    337.7, 337.8, 337.9, 337.9, 338.0, 338.0; ...    340.8, 340.9, 341.0, 341.1, 341.2, 341.2; ...    343.9, 344.0, 344.1, 344.2, 344.4, 344.5; ...    347.0, 347.1, 347.3, 347.5, 347.6, 347.8; ...    350.1, 350.3, 350.5, 350.8, 351.0, 351.2]; # m/s, speed-of-sound at temperature/humidity supports      ## Reference tests on water  ##   Reference: https://www.engineeringtoolbox.com/sound-speed-water-d_598.html (2025-02-03)  r_ds.speed_water_temp = [10, 20, 30]; # temperature supports  r_ds.speed_water_cs = [1447, 1481, 1507]; # m/s, speed-of-sound at temperature supports    ## Reference tests on aluminium cylinder  ##   Reference: https://www.engineeringtoolbox.com/properties-aluminum-pipe-d_1340.html  ##   Young's modulus of aluminium alloys  ##   Alloy 1100: E = 69, G = 25.9 GigaPascal, lower limit  ##   Alloy 2014: E = 74.5, G = 27.6 GigaPascal, upper limit  r_ds.alu_emod = [68.9, 74.5]; # Young's modulus min/max, GigaPascal, [min, max]  r_ds.alu_gmod = [25.9, 27.6]; # shear modulus, min/max, GigaPascal, [min, max]        #############################################################################  ## Distance measurement uncertainty, meter     ## Measuring device uncertainty, digital sliding caliper (Helios-Preisser DIGIMET 1320)  ## Reference: https://www.helios-preisser.com/fileadmin/user_upload/_assets/Downloads/Catalog_HP_EN_2023.pdf  r_ds.dist_uncert = [-0.01, 0.01]; # mm, [u_pos, u_neg]    ## Air, measuring procedure uncertainty  ## The distance stored in the data set is the distance between the acrylic glass panels. The sensors are not flush-fit to the surface of  ## the acrylic glass panels. They protrude up to 1.5 mm from the panels. Therefore, the actual distance can be up to 3 mm less than the distance  ## between the acrylic glass panels.  ## index 1: uncertainty, negative, index 2: uncertainty, positive  r_ds.air_umd_uncert = [-3, 0]; # mm, [u_pos, u_neg]    ## Water, measuring procedure uncertainty  ## Same situation as it is for air, but here the (slightly) movable sensors receive the pressure of the water. Therefore, the sensor  ## surfaces protrude only up to 0.5 from the acrylic glass panels. Therefore, the actual distance can be up to 1 mm less than the distance  ## between the acrylic glass panels.  ## index 1: uncertainty, negative, index 2: uncertainty, positive  r_ds.water_umd_uncert = [-1, 0]; # mm, [u_pos, u_neg]    ## Aluminium cylinder, measuring procedure uncertainty  r_ds.alu_umd_uncert = [0, 0]; # mm, [u_pos, u_neg]       #############################################################################  ## Weight measurement, gram    ## Measuring device uncertainty, digital balance (Mettler Toledo, MS16001L).  ## Reference: https://www.mt.com/my/en/home/phased_out_products/Laboratory_Weighing_Solutions/precision-balances/MS16001L-02.html  r_ds.wght_uncert = [-0.1, 0.1]; # g, [u_pos, u_neg]       #############################################################################  ## Ambient temperature measurement, deg Celsius    ## Measuring device uncertainty, wall temperature/humidity logger (Testo 177-H1)  ## Reference: https://static.testo.com/image/upload/Instruction-manual-and-Software/Instruction-manuals/testo-177-short-instruction-manual.pdf  r_ds.temp_uncert = [-0.3, 0.3]; # deg Celsius, [u_pos, u_neg]    #############################################################################  ## Ambient relative humidity, percent    ## Measuring device uncertainty, wall temperature/humidity logger (Testo 177-H1)  ## Reference: https://static.testo.com/image/upload/Instruction-manual-and-Software/Instruction-manuals/testo-177-short-instruction-manual.pdf  r_ds.humid_stdtemp = 25; # standard temperature, deg Celsius  r_ds.humid_uncert = [-3.0, 3.0]; # absolute, percent, at 25 deg Celsius (standard temperature), [u_pos, u_neg]  r_ds.humid_uncert_rel = [-0.06, 0.06]; # relative, percent/Kelvin, [u_pos, u_neg]    #############################################################################  ## Post-processing settings    ## decimate array for display (Latex memory for variables is limited)  r_ds.post.maxarraylen = 500;    ## save binary file, analysis results  r_ds.post.save_bin = true;    ## save binary file, figures with analysis results  r_ds.post.save_fig = true;    ## save TeX output, analysis results  r_ds.post.save_tex = true;    #############################################################################  ## License information    r_ds.info_license = {...    'Copyright 2025 Jakob Harden (Graz University of Technology, Graz, Austria)', ...    'This file is licensed under the "Creative Commons Attribution 4.0 International" license.', ...    'License deed: https://creativecommons.org/licenses/by/4.0/deed.en', ...    'This file is part of the PhD thesis of Jakob Harden.'}; # *.oct and *.tex files      r_ds.info_license_short = 'CC BY-4.0 Jakob Harden (Graz University of Technology, Graz, Austria). Created with "anadd-1.0.0".'; # *.ofig and *.png files    #############################################################################  ## Author information    r_ds.info_author = {...    'First name: Jakob', ...    'Last name: Harden', ...    'Affiliation: Graz University of Technology, 8010 Graz, Austria', ...    'email (1): jakob.harden@tugraz.at', ...    'email (2): jakob.harden@student.tugraz.at', ...    'email (3): office@jakobharden.at', ...    'ORCID: https://orcid.org/0000-0002-5752-1785', ...    'LinkedIn: https://www.linkedin.com/in/jakobharden/'}; # *.oct and *.tex files    #############################################################################  ## Export parameter structure    if (nargin < 1)    return;  endif
    if (r_ds.post.save_tex)    ## create structure    ads.obj = 'struct_anadd_param';    ads.ver = uint16([1, 0]);    ads.ersdel = struct_objdata('ersdel', 'uint', r_ds.ers_delay, '1', 'electromagnetic response section, delay, samples');    ads.ersdeluc1 = struct_objdata('ersdeluc1', 'uint', r_ds.ers_delay_uncert(1), '1', 'electromagnetic response section, delay uncertainty, low');    ads.ersdeluc2 = struct_objdata('ersdeluc2', 'uint', r_ds.ers_delay_uncert(2), '1', 'electromagnetic response section, delay uncertainty, low');    ads.erslen = struct_objdata('erslen', 'uint', r_ds.ers_length, '1', 'electromagnetic response section, length, samples');    ads.distuc1 = struct_objdata('distuc1', 'dbl', r_ds.dist_uncert(1), 'mm', 'distance, uncertainty, low (Helios-Preisser, DIGIMET 1320)');    ads.distuc2 = struct_objdata('distuc2', 'dbl', r_ds.dist_uncert(2), 'mm', 'distance, uncertainty, high (Helios-Preisser, DIGIMET 1320L)');    ads.wghtuc1 = struct_objdata('wghtuc1', 'dbl', r_ds.wght_uncert(1), 'deg Celsius', 'weight, uncertainty, low (Mettler Toledo, MS16001L)');    ads.wghtuc2 = struct_objdata('wghtuc2', 'dbl', r_ds.wght_uncert(2), 'deg Celsius', 'weight, uncertainty, high (Mettler Toledo, MS16001L)');    ads.tempuc1 = struct_objdata('tempuc1', 'dbl', r_ds.temp_uncert(1), 'deg Celsius', 'environ. temperature, uncertainty, low (Testo 177-H1)');    ads.tempuc2 = struct_objdata('tempuc2', 'dbl', r_ds.temp_uncert(2), 'deg Celsius', 'environ. temperature, uncertainty, high (Testo 177-H1)');    ads.humidstdtemp = struct_objdata('humidstdtemp', 'dbl', r_ds.humid_stdtemp(1), '\%', 'environ. humidity, standard temperature, (Testo 177-H1)');    ads.humiduc1 = struct_objdata('humiduc1', 'dbl', r_ds.humid_uncert(1), '\%', 'environ. humidity, uncertainty, low (Testo 177-H1)');    ads.humiduc2 = struct_objdata('humiduc2', 'dbl', r_ds.humid_uncert(2), '\%', 'environ. humidity, uncertainty, high (Testo 177-H1)');    ads.humiducrel1 = struct_objdata('humiducrel1', 'dbl', r_ds.humid_uncert_rel(1), '\%/K', 'environ. humidity, relative uncertainty, low (Testo 177-H1)');    ads.humiducrel2 = struct_objdata('humiducrel2', 'dbl', r_ds.humid_uncert_rel(2), '\%/K', 'environ. humidity, relative uncertainty, high (Testo 177-H1)');    ads.distairuc1 = struct_objdata('distairuc1', 'dbl', r_ds.air_umd_uncert(1), 'mm', 'air, distance uncertainty, low (measuring process)');    ads.distairuc2 = struct_objdata('distairuc2', 'dbl', r_ds.air_umd_uncert(2), 'mm', 'air, distance uncertainty, high (measuring process)');    ads.distwatuc1 = struct_objdata('distwatuc1', 'dbl', r_ds.water_umd_uncert(1), 'mm', 'water, distance uncertainty, low (measuring process)');    ads.distwatuc2 = struct_objdata('distwatuc2', 'dbl', r_ds.water_umd_uncert(2), 'mm', 'water, distance uncertainty, high (measuring process)');    ads.distaluuc1 = struct_objdata('distaluuc1', 'dbl', r_ds.alu_umd_uncert(1), 'mm', 'aluminium cyl., distance uncertainty, low (measuring process)');    ads.distaluuc2 = struct_objdata('distaluuc2', 'dbl', r_ds.alu_umd_uncert(2), 'mm', 'aluminium cyl., distance uncertainty, high (measuring process)');    ads.license_info = struct_objattrib('license', r_ds.info_license, 'license information');    ads.author_info = struct_objattrib('author', r_ds.info_author, 'author information');    ## export structure    tex_ofp = fullfile(r_ds.paths.exptex, 'param');    tex_error = tex_struct_export(ads, 'param', tex_ofp);  endif  endfunction